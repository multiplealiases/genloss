#!/usr/bin/env bash
# Shebang points to /usr/bin/env for portability.
# FreeBSD does not mount /usr/bin to /bin, unlike Linux.

# The MIT License (MIT)
# Copyright (c) 2022 multiplealiases
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Boilerplate to make Bash a saner language.
# Roughly:

# "don't allow use of unset variables"
set -o nounset

# "exit on error"
set -o errexit

# "fail if any command within a pipeline errors out (returns nonzero)"
set -o pipefail

function help_text() {
cat << EOF
$(banner)
$(usage)

Options:
 -n, --number       number of iterations (default 2500)
 -q, --quality      JPEG quality, integer from 0 to 100 (default 80)
 -v, --verbose      verbose mode
 -h, --help         display this help text
 --                 disables argument-parsing
                    (useful for filenames that start with '-')
 -b, --background   background color
                    If specifying colors in '#' notation,
                    use quotes to prevent it being parsed as a comment.
                    If also using GNU Parallel, escape the '#' character with
                    a backslash ( \ ) in addition to quoting it.
     --format       image format used (default jpeg)
EOF
}

function banner() {
echo Induce JPEG generation loss on images via iterated rotation and saving.
}

function err_file_notregular() {
cat << EOF
$filepath: exists, but is not regular-type.
Did you input a directory by mistake?
Note that file descriptors (such as /dev/stdin) are not yet supported as input.
EOF
exit 2
}

function err_file_notexist() {
cat << EOF
$filepath: does not exist.
EOF
exit 3
}

function usage() {
cat << EOF
Usage: $(basename "$0") [options] filename
EOF
}

function invoke_help() {
echo Invoke 'genloss --help' for further help.
}

function verbose_params() {
cat << EOF
Argument list: "$ARGS"
Input filename: "$filename"
Detected base filename: "$base_filename"
Detected file extension: "$extension"
Detected resolution: "$resolution"
Number of iterations: "$number_of_iterations"
JPEG quality level: "$quality"

EOF
}

ARGS=$(getopt --options n:,q:,v,h,b: --long number:,quality:,verbose,help,background:,format: -- "$@")
eval set -- "$ARGS"
while true; do
		case "$1" in
		-n | --number)
			number_of_iterations="$2"
			shift 2
			;;
		-q | --quality)
			quality="$2"
			shift 2
			;;
		-v | --verbose)
			verbose="1"
			shift
			;;
		-h | --help)
			help_text
			exit 127
			;;
		-b | --background)
			background_color="$2"
			shift 2
			;;
		--format)
			image_format="$2"
			shift 2
			;;
		--)
			# The +o nounset, -o nounset pattern is needed, otherwise
            # the script will stop at evaluating an unset $2 variable.
			set +o nounset
			if [[ -z "$2" ]]; then usage; invoke_help; exit 1 ; fi
			set -o nounset
			filepath="$2"
			break
			;;
		*)
			echo What is "$2"?
			exit 1
			break
	esac
done
# Does the filepath even exist?
# If not, print a suitable error message.
# This prevents the relatively unfriendly error message that
# ImageMagick (or whatever got invoked) typically displays for a nonexistent file.

# Ooh, look at me, I'm fancy and using guard clauses!

if [[ ! (-e "$filepath") ]] # if the file does not exist
then
	err_file_notexist
# I need a regular file, not just any file you can throw at me.
elif [[ ! (-f "$filepath") ]] # if the file is not a regular file
then
	err_file_notregular
fi


# Extracting filename from the given file path-- the script
# might be invoked using a path, not just a file name.
filename="$(basename "$filepath")"

# (Attempting) to extract file extension and extension-less filename.
# Produces cleaner output filenames.
# This is prone to pitfalls, but it's either this, or shelling out to
# Python, using os.path.splittext().
# Also, when was the last time you encountered
# an image file without a file extension?
# Or one with *two*, for that matter?
extension="${filename##*.}"
base_filename="${filename%.*}"
# Hey, did you know that GraphicsMagick won't recognize %[w], only %w in -format strings?
# Thankfully, correcting it for GM *does* work in IM, so we're not too badly screwed.
resolution="$(identify -ping -format '%wx%h' "$filepath")"

# Bunch of defaults.
quality="${quality-80}"
number_of_iterations="${number_of_iterations-2500}"
background_color="${background_color-white}"
image_format="${image_format-jpeg}"

# Getting around nounset restrictions by defaulting verbose
# to 0 if 'verbose' is unset. Possibly dirty.
verbose="${verbose-0}"

if [[ "$verbose" == 1 ]];
then
	verbose_params
fi

# $1: base_filename
# $2: quality
# $3: iteration
# Dirty, but saves me the effort of checking each time
# I want to change the output format filename, at least in theory.
function formatted_output_name() {
	printf '%s-q%s-%s' "$1" "$2" "$3"
}

# Dirty hack? I think it's needed to keep the filename in a format the
# rest of the script can use later.
convert "$filepath" -quality "$quality" "$(formatted_output_name "$base_filename" "$quality" 0)"."$image_format"

# *Very* dirty.
# Maybe should cordon this off into a function or two?

# Dropped it down to 2 (gargantuan) commands.
# Rotating rotate = random(0,360) degrees, then -n degrees seems to produce
# the same effect as going +45, +45, +45 (...) until you get back to 360.
# It's more tractable this way, and it only spawns 2 + 1 = 3 processes, not 36.
for i in $(seq 0 "$((number_of_iterations - 1))"); do
	# I believe --random-source is GNU-specific.
	# At the very least, it doesn't exist in Busybox.
	rotate="$(shuf -i 0-360 -n 1 --random-source=/dev/urandom)"
	>&2 echo "$base_filename"."$extension"':' start "$i": quality "$quality"
	# This is hardcoded to use 'convert'.
	# I tried implementing functionality to allow changing this dynamically,
	# but you get into such fun things like metaprogramming... which, to quote http://mywiki.wooledge.org/BashFAQ/050
	# > In bash, the only ways to generate, manipulate, or store code more
	# > complex than a simple command at runtime involve storing the code's
	# > plain text in a variable, file, stream, or function, and then using
	# > eval or sh to evaluate the stored code.  Directly manipulating raw
	# > code strings is among the least robust of metaprogramming techniques
	# > and most common sources of bugs and security issues.
	# Implement that at your own risk.

	# If you really need to change the invocation, change the 'convert' at the start
	# of the next 2 commands to something else. For what it's worth, GraphicsMagick
	# works perfectly fine in place of ImageMagick--
	# you might even be using it by accident, depending on your system!
	convert "$(formatted_output_name "$base_filename" "$quality" "$i")"."$image_format" \
	-background "$background_color" \
	-rotate "$rotate" \
	-quality "$quality" \
	"$image_format":- | \
	\
	convert "$image_format":- \
	-background "$background_color" \
	-rotate -"$rotate" \
	-quality "$quality" \
	-gravity center \
	-extent "$resolution" \
	"$(formatted_output_name "$base_filename" "$quality" $((i + 1)))"."$image_format"
	>&2 echo "$base_filename"."$extension": end "$i"
done
